#!/bin/bash

if [ -z "$BASH" ]
then
  >&2 echo "Unsupported shell. Please use bash shell."
  exit 1
fi

set -u -e

concerto=$0

client=${client:=redishub}

. bin/_${client}.sh
. bin/_util.sh

# prepare $archive dir for today

archive=$priv/tmp/archive/`date +%Y%m%d`
mkdir -p $archive
#mv -f $priv/tmp/* $archive/. 2> /dev/null || true

# prepare $id defaulted to HOST-USER-DATE-TIME

user=${user:=none}
if [ -f $priv/github.user ]
then
   user=`cat $priv/github.user`
   [ -t 1 ] && echo -e "${cDarkGray}github user: ${cDarkGray}${sBold}$user${sReset}"
fi

id=${id:=`hostname -s`-$USER-`date +'%Y-%m-%d-%Hh%M-%Ss'`}
last=none
if [ -f $priv/latest.id ]
then
  last=`cat $priv/latest.id`
  [ -t 1 ] && echo -e "${cDarkGray}last cert gen id: ${cDarkGray}${sBold}${last}${sReset}"
fi

# commands

c0gen() { # generate a timestamped cert in $priv/tmp
  carg $# gen
  cd $priv/tmp
  subj=${subj:=\/CN=$id}
  headline $id $subj
  openssl req -x509 -nodes -days 365 -newkey rsa:2048 -subj "$subj" -out $id.cert.pem -keyout $id.privkey.pem | grep '^\w'
  headline $id.cert.pem
  openssl x509 -text -in $id.cert.pem | grep 'CN='
  cat $id.cert.pem $id.privkey.pem > $id.privcert.pem
  headline $id.privcert.pem
  openssl x509 -text -in $id.privcert.pem | grep 'CN='
  headline `pwd`
  ls -lt | head
  echo "$id" > $priv/latest.id
  hint "$concerto deploy $id"
}

c0archive() { # move contents of $priv to $priv/tmp/archive
   carg $# archive
   cd $priv
   headline `pwd`
   ls -lt
   headline "Moving $priv contents to $archive"
   mv -f $priv/* $archive/. 2> /dev/null || true
   ls
   cp $archive/github.user $priv
   cp $archive/latest.id $priv
   hint "Try 'gen' command to generate cert"
}

c0gharchive() {
   carg $# gharchive
   headline "Moving $repo to $archive"
   if [ -d $archive/$repoName ]
   then
      abort "Please move $archive/$repoName as follows:" \
        "mv $archive/$repoName $archive/`date +%Hh%Mm%S`.$repoName" \
        "$concerto gharchive"
   fi
   mv -f $repo $archive/. # 2> /dev/null || true
   cd $archive
   headline $archive
   ls -lt
   hint "Try 'ghinit' to create $repo repo, or 'ghclone'"
}

c1deploy() { # id - copy generated cert files to $priv
  carg $# deploy id
  [ $# -eq 1 ] || abort "Invalid number of args: $#"
  id=$1
  cd $priv/tmp
  [ ! -f $id.privcert.pem ] && abort "Not found: $priv/tmp/$id.privcert.pem"
  cd $priv
  [ ! -f cert.pem ] || abort "Already exists: $priv/cert.pem." "Try: 'archive'"
  [ ! -f privkey.pem ] || abort "Already exists: $priv/privkey.pem" "Try: 'archive'"
  [ ! -f privcert.pem ] || abort "Already exists: $priv/privcert.pem" "Try: 'archive'"
  headline "deploy cert $id to $priv/privcert.pem"
  cp -i $priv/tmp/$id.cert.pem cert.pem
  cp -i $priv/tmp/$id.privkey.pem privkey.pem
  cp -i $priv/tmp/$id.privcert.pem privcert.pem
  headline "$priv $ cat cert.id"
  echo $id > cert.id
  cat cert.id
  headline "$priv $ openssl x509 -in cert.pem"
  openssl x509 -text -in cert.pem | grep 'CN='
  headline "$priv $ ls"
  ls -lt
  hint "$concerto ghadd $id $defaultRole"
}

c0deploy() {
   carg $# deploy
   [ ! -f $priv/latest.id ] && abort "Not found: $priv/latest.id"
   c1deploy `cat $priv/latest.id`
}

c0ghcheck() {
   carg $# ghcheck
   if [ ! -d $repo ]
   then
      abort "Not found: $repo" "First try 'ghinit' or 'ghclone'"
   fi
   if [ ! -f $repo/$client/manifest.json ]
   then
      abort "Not found: $repo/$client/manifest.json" "First try 'ghinit' or 'ghclone'"
   fi
}

c1gharchiveid() {
   carg $# gharchiveid id
   id="$1"
   c0ghcheck
   cd $repo/certs
   [ ! -f $id.cert.pem ] && abortc "Not found: $repo/certs/$id.cert.pem" "$concerto ghadd $id"
   mv $id.cert.pem $archive/.
   headline "Moved $id.cert.pem to $archive"
   ls -lt | head
}

c2ghadd() {
   carg $# ghadd id role
   id=$1
   role=$2
   c0ghcheck
   cd $repo
   headline `pwd` ghadd $id $role
   [ -f $priv/tmp/${id}.cert.pem ] || abort "Not found: $priv/tmp/${id}.cert.pem"
   [ -f certs/$id.cert.pem ] && abortc "Already exists: $repo/certs/$id.cert.pem" "$concerto gharchiveid $id"
   openssl x509 -text -in certs/${id}.cert.pem | grep 'CN='
   headline "Copying $priv/tmp/$id.cert.pem to repo: $repo/certs"
   cp $priv/tmp/$id.cert.pem $repo/certs
   if cat $repo/$client/$role.txt | grep -q "^$id.cert.pem"
   then
      warn "Role manifest $repo/$client/$role.txt already contains $id.cert.pem"
   else
     headline "Adding $id.cert.pem to manifest: $repo/$client/$role.txt"
     echo ${id}.cert.pem >> $client/$role.txt
   fi
   headline $repo/$client/$role.txt
   cat $client/$role.txt
   hint "OK, now try 'ghshow' to check, and 'ghcommit MESSAGE' to add all, commit and push master"
}

c0ghadd() {
   carg $# ghadd
   role=$defaultRole
   [ ! -f $priv/latest.id ] && abort "Not found: $priv/latest.id" "Try 'gen'"
   c2ghadd `cat $priv/latest.id` $role
}

c1ghinit() {
   carg $# ghinit user
   user=$1
   info "ghinit user $user"
   if [ -d $repo ]
   then
      abort "Already exists: $repo" "$concerto ghadd ID #or $concerto ghcommit MESSAGE"
   fi
   headline "Validate exists: https://github.com/$user"
   curl -s -I https://github.com/$user | grep '^HTTP' | grep OK || abort "Invalid Github user: $user"
   if [ ! -f $priv/github.user ]
   then
     echo $user > $priv/github.user
     info "Caching user in $priv/github.user"
   fi
   headline "Validate exists: https://github.com/$user/$repoName"
   curl -s -I https://github.com/$user/$repoName | grep '^HTTP' | grep OK ||
     abort "Invalid Github repo: $user/$repoName" \
     "Please visit https://github.com/$user and create empty repo https://github.com/$user/$repoName" \
     "Then try 'ghinit $user' again"
   mkdir $repo
   cd $repo
   headline `pwd`
   mkdir certs
   mkdir $client
   headline "Initialising .git in $PWD with remote origin: git@github.com:$user/$repoName.git"
   git init
   headline "Add remote origin: git@github.com:$user/$repoName.git"
   git remote add origin git@github.com:$user/$repoName.git
   git remote -v
   hint "OK, now try 'ghadd' to add cert to the repo"
}

c0ghinit() {
   carg $# ghinit
   [ -f $priv/github.user ] || abort "Not found: $priv/github.user" "$concerto ghuser USER"
   c1ghinit `cat $priv/github.user`
}

c1ghinitforce() {
   carg $# ghinitforce user
   user=$1
   if [ -d $archive/$repoName ]
   then
     headline "mv $archive/$repoName $archive/`date +%Hh%Mm%S`.$repoName"
     mv $archive/$repoName $archive/`date +%Hh%Mm%S`.$repoName
   fi
   if [ -d $repo ]
   then
     headline "mv $repo $archive/."
     mv $repo $archive/.
   fi
   c1ghinit $user
}

c1ghclone() {
   carg $# ghclone user
   user="$1"
   if [ -d $repo ]
   then
      cd $repo
      headline `pwd`
      git remote -v
      abort "Already exists: $repo" "Try 'ghpull'"
   else
      cd ~
      headline "git clone https://github.com/$user/$repoName"
      git clone https://github.com/$user/$repoName
      cd $repoName
      headline `pwd`
      git remote -v
      ls -lt
   fi
}

c0ghpull() {
   carg $# ghpull
   if [ ! -d $repo ]
   then
      abort "Not found: $repo. Try 'ghinit' or 'ghclone'"
   else
      cd $repo
      headline `pwd` pull
      git remote -v
      git pull
   fi
}

c2ghstatus() {
   cd $repo
   git status | sed '/^$/d'
}

c2ghcommit() {
   carg $# ghcommit user message
   user="$1"
   message="$2"
   [ -d $repo ]
   cd $repo
   headline `pwd`
   [ -d .git ]
   ls -lta | grep -v '\.$'
   headline 'git remote -v'
   git remote -v
   git remote -v | grep -q "^origin\s*git@github.com:$user/$repoName.git " || abort 'git remote not git@github.com'
   headline $repo/$client/manifest.json
   cat $client/manifest.json
   headline "$repo \$ git add -A"
   git add -A
   headline "$repo \$ git commit -m '$message'"
   git commit -m "$message"
   headline "$repo \$ git pull"
   if git pull 2>&1 | grep -q '^There is no tracking information for the current branch'
   then
      info 'git branch --set-upstream-to=origin/master master'
      git branch --set-upstream-to=origin/master master
      git pull
   fi
   headline `pwd` 'git push'
   if git push 2>&1 | grep -q '^fatal: The current branch master has no upstream branch'
   then
      headline 'git push --set-upstream origin master'
      git push --set-upstream origin master
   fi
   headline `pwd` 'git status'
   git status
   headline "Verify https://raw.githubusercontent.com/$user/$repoName/master/$client/manifest.json"
   curl -s https://raw.githubusercontent.com/$user/$repoName/master/$client/manifest.json
   headline "Verify https://raw.githubusercontent.com/$user/$repoName/master/$client/$defaultRole.txt"
   curl -s https://raw.githubusercontent.com/$user/$repoName/master/$client/$defaultRole.txt
}

c1ghcommit() {
  carg $# ghcommit message # take user from $priv/github.user
  message="$1"
  [ ! -f $priv/github.user ] && abort 'No github user' "Try 'ghuser USER' to set the github user"
  info "Assuming github user is $user as per: $priv/github.user"
  c2ghcommit $user $message
}

c0ghcommit() {
   carg $# ghcommit #
   [ ! -f $priv/latest.id ] && abort "No last id, try 'gen'"
   id=`cat $priv/latest.id`
   info "Taking latest ID $id from $priv/latest.id as the git commit message"
   message=$id
   c1ghcommit $message
}

c1ghuser() {
  carg $# ghuser user
  user="$1"
  headline "Validate exists: https://github.com/$user"
  curl -s -I https://github.com/$user | grep '^HTTP' | grep OK || abort "Invalid Github user: $user"
  echo "$1" > $priv/github.user
  headline "Github user saved in $priv/github.user"
  cat $priv/github.user
}

c0ghuser() {
  abort "Specify the Github.com user hosting 'certs-concerto' repo"
}

c0ghshow() {
   carg $# ghshow
   if [ ! -d $priv ]
   then
      headlinew "Not found: $priv"
   else
      if [ -f $priv/github.user ]
      then
         headline $priv/github.user
         cat $priv/github.user
      else
         warn "No $priv/github.user"
      fi
      if [ -f $priv/cert.pem ]
      then
         headline $priv/cert.pem
         openssl x509 -text -in $priv/cert.pem | grep 'CN='
      fi
   fi
   if [ ! -d $repo ]
   then
      abort "Not found: $repo" "Try 'ghinit' or 'ghclone'"
   fi
   cd $repo
   headline "$repo \$ ls"
   ls -lta | grep -v '\.$'
   headline "$repo \$ sha1sum"
   sha1sum `ls -t $client/*.json certs/*.pem`
   if [ ! -f $client/manifest.json ]
   then
     headlinew "$repo \$ cat $client/manifest.json"
   else
     headline "$repo \$ cat $client/manifest.json"
     cat $client/manifest.json
     roles=$defaultRole # TODO
     for role in $roles
     do
       for cert in `cat $client/$role.txt`
       do
         if ! echo "$cert" | grep -q '\.cert.pem$'
         then
           headlinew "$repo $ head certs/$cert"
           head -2 certs/$cert
         else
           headline "$repo $ openssl x509 certs/$cert"
           openssl x509 -text -in certs/$cert | grep 'CN='
         fi
       done
     done
   fi
   headline "$repo \$ git remote -v"
   git remote -v
   headline "$repo \$ git status"
   git status | sed '/^$/d'
}

c0ghclean() {
   carg $# ghclean
   cd $repo || abort "Not found: $repo"
   headline "$repo \$ $ ls"
   ls -lta | grep -v '\.$'
   headline "$repo \$ sha1sum"
   sha1sum `ls -t $client/*.json certs/*.pem`
   headline "$repo \$ cat $client/manifest.json"
   cat $client/manifest.json
   headline 'Check certs in repo vs manifest'
   for cert in `ls *.cert.pem`
   do
      if ! cat $client/manifest.json | grep -q "$cert"
      then
         echo "Try: rm -i $repo/$cert"
      fi
   done
}

c0id() {
  carg $# id
  cat $priv/latest.id
}

c0show() {
   carg $# show
   cd $priv/tmp
   headline "$priv/tmp $ ls -lt *.pem"
   ls -lt *.pem | head -3
   cd $priv
   headline "$priv $ ls -lt *.pem"
   ls -lt *.pem
   if [ -f cert.pem ]
   then
      headline `pwd`/cert.pem
      sha1sum cert.pem | cut -d' ' -f1
      openssl x509 -text -in cert.pem | grep 'CN='
   fi
}

helpl() {
  echo -e "  $1 ${ec}# $2${er}" | sed "s/\/home\/$USER\///g"
}

c0help() {
   ec=''
   er=''
   eu=''
   if [ -t 1 ]
   then
      eu=${sBold}${cLightBlue}
      ec=${cLightBlue}
      er=${cNormal}${sReset}
   fi
   headline "Usage: see $help"
   helpl "show" "show state of $priv"
   helpl "gen" "generate a timestamped cert in $priv/tmp"
   helpl "id" "show $priv/latest.id for last generated cert"
   helpl "deploy ID" "copy generated cert files to $priv"
   helpl "archive" "move contents of $priv to $priv/tmp/archive"
   helpl "ghshow" "show state of $repo"
   helpl "ghinit USER" "initialise $repo with generated cert"
   helpl "ghclone USER" "git clone $repo"
   helpl "ghpull" "git pull $repo"
   helpl "ghadd ID ROLE" "copy generated cert to $repo/$client/ROLE.txt"
   helpl "ghcommit MESSAGE" "git add, commit, push $repo"
}

c0danger1() {
   $concerto archive
   $concerto gen
   $concerto deploy
   $concerto ghadd
}

# cli command

command=help
if [ $# -ge 1 ]
then
   command="$1"
   echo $command | grep -q '^\w\w*$' || abort "Invalid command: $command"
   shift
fi
[ -t 1 ] && echo -e "${cLightGray}${sBold}command: $command ${@}${sReset}"
c$#$command $@ || c0help

#echo
