#!/bin/bash

set -u -e

concerto=$0

# supported clients

client_redishub() {
  home=${home:=$HOME}
  priv=${priv:=$home/.redishub}
  repoName=${repoName:=certs-concerto}
  repo=${repo:=$home/$repoName}
  rapi="http://clisecure.redishub.com"
  help='https://github.com/evanx/concerto-bash/blob/master/README.md'
}

client=${client:=redishub}
client_$client

client_authorized_certs=${client}_authorized_certs

# bash echo styles and colors

sBold="\e[1m"
sItalic="\e[3m"
sUnderline="\e[4m"
sReset="\e[0m"

cNormal="\e[39m"
cRed="\e[91m"
cGreen="\e[32m"
cYellow="\e[33m"
cLightGray="\e[37m"
cDarkGray="\e[90m"
cLightBlue="\e[94m"

# environment

debug() {
  local name="$1"
  shift
  echo -e "${cDarkGray}$name ${cDarkGray}${sBold}${*}${sReset}"
}

# prepare $archive dir for today

archive=$priv/tmp/archive/`date +%Y%m%d`
mkdir -p $archive
#mv -f $priv/tmp/* $archive/. 2> /dev/null || true

# prepare $id defaulted to HOST-USER-DATE-TIME

user=${user:=none}
if [ -f $priv/github.user ]
then
   user=`cat $priv/github.user`
   [ -t 1 ] && echo -e "${cDarkGray}github user: ${cDarkGray}${sBold}$user${sReset}"
fi

id=${id:=`hostname -s`-$USER-`date +'%Y-%m-%d-%Hh%M-%Ss'`}
last=none
if [ -f $priv/latest.id ]
then
  last=`cat $priv/latest.id`
  [ -t 1 ] && echo -e "${cDarkGray}last cert gen id: ${cDarkGray}${sBold}${last}${sReset}"
fi


# echo utils

abort() {
   if [ -t 1 ]
   then
     echo -e "${sBold}${cRed}${1}${sReset}"
     shift
     if [ $# -gt 0 ]
     then
       echo "Try:"
       while [ $# -gt 0 ]
       do
         echo -e "${cGreen}${1}${cNormal}"
         shift
       done
     fi
   else
      echo "$1"
      shift
      if [ $# -gt 0 ]
      then
        echo "Try:"
        while [ $# -gt 0 ]
        do
          echo "$1"
          shift
        done
     fi
   fi
   exit 1
}

abortc() {
   if [ -t 1 ]
   then
     echo -e "${sBold}${cRed}${1}${sReset}"
     shift
     if [ $# -gt 0 ]
     then
       echo -e "${sBold}${cGreen}Try:${sReset}"
       while [ $# -gt 0 ]
       do
         echo -e "${cGreen}${1}${cNormal}"
         shift
       done
     fi
   else
      echo "$1"
      shift
      if [ $# -gt 0 ]
      then
        echo "Try:"
        while [ $# -gt 0 ]
        do
          echo "$1"
          shift
        done
     fi
   fi
   exit 1
}

headline() {
   echo
   if [ -t 1 ]
   then
      echo -e "${cYellow}${*}${cNormal}"
   else
      echo "$*"
   fi
}

headlinew() {
   echo
   if [ -t 1 ]
   then
      echo -e "${cRed}${sBold}${*}${cNormal}${sReset}"
   else
      echo "$*"
   fi
}

warn() {
   if [ -t 1 ]
   then
      echo -e "${cRed}${*}${cNormal}"
   else
      echo "$*"
   fi
}

info() {
   if [ -t 1 ]
   then
      echo -e "${cGreen}${*}${cNormal}"
   else
      echo "$*"
   fi
}

headlineb() {
   echo
   if [ -t 1 ]
   then
      echo -e "${sBold}${cYellow}${*}${sReset}"
   else
      echo "$*"
   fi
}

headlinei() {
   echo
   if [ -t 1 ]
   then
      echo -e "${sItalic}${cYellow}${*}${sReset}"
   else
      echo "$*"
   fi
}

hint() {
   echo
   if [ -t 1 ]
   then
      if echo "$1" | grep -q '^[A-Z]'
      then
        echo -e "${cGreen}Hint: ${*}${cNormal}"
      else
        echo -e "${cGreen}Hint:\n${*}${cNormal}"
      fi
   else
      echo "Hint: $*"
   fi
}

carg() {
  [ $# -ge 2 ] || abort "Invalid number of args: $# for 'carg' but expect 2 or more"
  count=$1
  shift
  name=$1
  shift
  expected=$#
  if [ $expected -ne $count ]
  then
    if [ $# -gt 0]
    then
      abort "Invalid $count args for '$name' but expect $# ($@)"
    else
      abort "Invalid $count args for '$name' but expect none"
    fi
  fi
}

# commands

c0gen() { # generate a timestamped cert in $priv/tmp
  carg $# gen
  cd $priv/tmp
  subj=${subj:=\/CN=$id}
  headline $id $subj
  openssl req -x509 -nodes -days 365 -newkey rsa:2048 -subj "$subj" -out $id.cert.pem -keyout $id.privkey.pem
  headline $id.cert.pem
  openssl x509 -text -in $id.cert.pem | grep 'CN='
  cat $id.cert.pem $id.privkey.pem > $id.privcert.pem
  headline $id.privcert.pem
  openssl x509 -text -in $id.privcert.pem | grep 'CN='
  headline `pwd`
  ls -lt | head
  echo "$id" > $priv/latest.id
  hint "$concerto deploy $id"
}

c0archive() { # move contents of $priv to $priv/tmp/archive
   carg $# archive
   cd $priv
   headline `pwd`
   ls -lt
   headline "Moving $priv contents to $archive"
   mv -f $priv/* $archive/. 2> /dev/null || true
   ls
   cp $archive/github.user $priv
   cp $archive/latest.id $priv
   hint "Try 'gen' command to generate cert"
}

c0gharchive() {
   carg $# gharchive
   headline "Moving $repo to $archive"
   if [ -d $archive/$repoName ]
   then
      abort "Please move $archive/$repoName as follows:" \
        "mv $archive/$repoName $archive/`date +%Hh%Mm%S`.$repoName" \
        "$concerto gharchive"
   fi
   mv -f $repo $archive/. # 2> /dev/null || true
   cd $archive
   headline $archive
   ls -lt
   hint "Try 'ghinit' to create $repo repo, or 'ghclone'"
}

c1deploy() { # id - copy generated cert files to $priv
  carg $# deploy id
  [ $# -eq 1 ] || abort "Invalid number of args: $#"
  id=$1
  cd $priv/tmp
  [ ! -f $id.privcert.pem ] && abort "Not found: $priv/tmp/$id.privcert.pem"
  cd $priv
  [ ! -f cert.pem ] || abort "Already exists: $priv/cert.pem." "Try: 'archive'"
  [ ! -f privkey.pem ] || abort "Already exists: $priv/privkey.pem" "Try: 'archive'"
  [ ! -f privcert.pem ] || abort "Already exists: $priv/privcert.pem" "Try: 'archive'"
  headline "deploy cert $id to $priv/privcert.pem"
  cp -i $priv/tmp/$id.cert.pem cert.pem
  cp -i $priv/tmp/$id.privkey.pem privkey.pem
  cp -i $priv/tmp/$id.privcert.pem privcert.pem
  headline "$priv $ cat cert.id"
  echo $id > cert.id
  cat cert.id
  headline "$priv $ openssl x509 -in cert.pem"
  openssl x509 -text -in cert.pem | grep 'CN='
  headline "$priv $ ls"
  ls -lt
  hint "$concerto ghadd $id"
}

c0deploy() {
   carg $# deploy
   [ ! -f $priv/latest.id ] && abort "Not found: $priv/latest.id"
   c1deploy `cat $priv/latest.id`
}

c1genm() {
   carg $# genm id
   id=$1
   echo "spec: 'concerto/manifest#0.1.0'"
   echo "certs: ["
   echo "  '${id}.cert.pem'"
   echo "]"
}

c0ghcheck() {
   carg $# ghcheck
   if [ ! -d $repo ]
   then
      abort "Not found: $repo" "First try 'ghinit' or 'ghclone'"
   fi
   if [ ! -f $repo/$client_authorized_certs.cson ]
   then
      abort "Not found: $repo/$client_authorized_certs.cson" "First try 'ghinit' or 'ghclone'"
   fi
}

c1gharchiveid() {
   carg $# gharchiveid id
   id="$1"
   c0ghcheck
   cd $repo
   [ ! -f $id.cert.pem ] && abortc "Not found: $repo/$id.cert.pem" "$concerto ghadd $id"
   mv $id.cert.pem $archive/.
   headline "Moved $id.cert.pem to $archive"
   ls -lt | head
}

c1ghadd() {
   carg $# ghadd id
   id="$1"
   c0ghcheck
   cd $repo
   headline `pwd`
   [ -f $id.cert.pem ] && abortc "Already exists: $id.cert.pem" "$concerto gharchiveid $id"
   headline "Copying $id.cert.pem to repo: $repo"
   cp $priv/tmp/$id.cert.pem $repo
   sha1sum `ls -t *.pem`
   if cat $repo/$client_authorized_certs.cson | grep -q "'$id.cert.pem'"
   then
      warn "Manifest $repo/$client_authorized_certs.cson already contains $id.cert.pem"
   else
     headline "Adding $id.cert.pem to manifest: $repo/$client_authorized_certs.cson"
     sed -i "s/^\]\s*$/  '${id}.cert.pem'\n\]\n/" $client_authorized_certs.cson
     sed -i "/^$/d" $client_authorized_certs.cson
   fi
   headline "$repo/$client_authorized_certs.cson"
   cat $client_authorized_certs.cson
}

c0ghadd() {
   carg $# ghadd
   [ ! -f $priv/latest.id ] && abort "Not found: $priv/latest.id" "Try 'gen'"
   c1ghadd `cat $priv/latest.id`
}

c2ghinit() {
   carg $# ghinit user id
   user=$1
   id=$2
   info "ghinit user $user with cert id $2"
   if [ -d $repo ]
   then
      abort "Already exists: $repo" "$concerto ghadd ID #or $concerto ghcommit MESSAGE"
   fi
   headline "Validate exists: https://github.com/$user"
   curl -s -I https://github.com/$user | grep '^HTTP' | grep OK || abort "Invalid Github user: $user"
   if [ ! -f $priv/github.user ]
   then
     echo $user > $priv/github.user
     info "Caching user in $priv/github.user"
   fi
   headline "Validate exists: https://github.com/$user/$repoName"
   curl -s -I https://github.com/$user/$repoName | grep '^HTTP' | grep OK ||
     abort "Invalid Github repo: $user/$repoName" \
     "Please visit https://github.com/$user and create empty repo https://github.com/$user/$repoName" \
     "Then try 'ghinit $user' again"
   [ -f $priv/tmp/${id}.cert.pem ] || abort "Not found: $priv/tmp/${id}.cert.pem"
   mkdir $repo
   cd $repo
   headline "Initialising .git in $PWD with remote origin: git@github.com:$user/$repoName.git"
   git init
   headline "Add remote origin: git@github.com:$user/$repoName.git"
   git remote add origin git@github.com:$user/$repoName.git
   git remote -v
   headline `pwd`
   headline "Copying $priv/tmp/${id}.cert.pem to $repo"
   cp -i $priv/tmp/${id}.cert.pem ${id}.cert.pem
   openssl x509 -text -in  ${id}.cert.pem | grep 'CN='
   ls -lta | grep -v '\.$'
   if [ -f $client_authorized_certs.cson ]
   then
      if cat $client_authorized_certs.cson | grep "${id}.cert.pem"
      then
        warn "$client_authorized_certs.cson already contains $id.cert.pem"
      else
        headline "Modifying $client_authorized_certs.cson to add $id.cert.pem"
        sed -i '/^\]\s*$/d' $client_authorized_certs.cson
        echo -e "  '${id}.cert.pem'\n]\n" >> $client_authorized_certs.cson
      fi
   else
      info "Creating $client_authorized_certs.cson with $id.cert.pem"
      c1genm $id > $client_authorized_certs.cson
   fi
   headline `pwd`
   ls -lta | grep -v '\.$'
   echo
   sha1sum `ls -t *.cson *.pem`
   headline `pwd`/'$client_authorized_certs.cson'
   cat $client_authorized_certs.cson
   headline 'git status' `pwd`
   git status
   hint "OK, now try 'ghcommit MESSAGE' to add all, commit and push master"
}

c1ghinit() {
   carg $# ghinit user
   user=$1
   [ -f $priv/latest.id ] || abort "Latest cert gen ID not found: $priv/latest.id"
   id=`cat $priv/latest.id`
   headline "ghinit $user $id"
   c2ghinit $user $id
}

c1ghinitforce() {
   carg $# ghinitforce user
   if [ -d $archive/$repoName ]
   then
     headline "mv $archive/$repoName $archive/`date +%Hh%Mm%S`.$repoName"
     mv $archive/$repoName $archive/`date +%Hh%Mm%S`.$repoName
   fi
   if [ -d $repo ]
   then
     headline "mv $repo $archive/."
     mv $repo $archive/.
   fi
   c1ghinit $1
}

c1ghclone() {
   carg $# ghclone user
   user="$1"
   if [ -d $repo ]
   then
      cd $repo
      headline `pwd`
      git remote -v
      abort "Already exists: $repo" "Try 'ghpull'"
   else
      cd ~
      headline "git clone https://github.com/$user/$repoName"
      git clone https://github.com/$user/$repoName
      cd $repoName
      headline `pwd`
      git remote -v
      ls -lt
   fi
}

c0ghpull() {
   carg $# ghpull
   if [ ! -d $repo ]
   then
      abort "Not found: $repo. Try 'ghinit' or 'ghclone'"
   else
      cd $repo
      headline `pwd` pull
      git remote -v
      git pull
   fi
}

c2ghstatus() {
   cd $repo
   git status | sed '/^$/d'
}

c2ghcommit() {
   carg $# ghcommit user message
   user="$1"
   message="$2"
   [ -d $repo ]
   cd $repo
   headline `pwd`
   [ -d .git ]
   ls -lta | grep -v '\.$'
   headline 'git remote -v'
   git remote -v
   git remote -v | grep -q "^origin\s*git@github.com:$user/$repoName.git " || abort 'git remote not git@github.com'
   headline $repo/$client_authorized_certs.cson
   cat $client_authorized_certs.cson
   headline "$repo \$ git add -A"
   git add -A
   headline "$repo \$ git commit -m '$message'"
   git commit -m "$message"
   headline "$repo \$ git pull"
   if git pull 2>&1 | grep -q '^There is no tracking information for the current branch'
   then
      info 'git branch --set-upstream-to=origin/master master'
      git branch --set-upstream-to=origin/master master
      git pull
   fi
   headline `pwd` 'git push'
   if git push 2>&1 | grep -q '^fatal: The current branch master has no upstream branch'
   then
      headline 'git push --set-upstream origin master'
      git push --set-upstream origin master
   fi
   headline `pwd` 'git status'
   git status
   headline 'Verify https://raw.githubusercontent.com/$user/$repoName/master/$client_authorized_certs.cson'
   curl -s https://raw.githubusercontent.com/$user/$repoName/master/$client_authorized_certs.cson
}

c1ghcommit() {
  carg $# ghcommit message # take user from $priv/github.user
  message="$1"
  [ ! -f $priv/github.user ] && abort 'No github user' "Try 'ghuser USER' to set the github user"
  info "Assuming github user is $user as per: $priv/github.user"
  c2ghcommit $user $message
}

c0ghcommit() {
   carg $# ghcommit #
   [ -f $priv/latest.id ] && abort "No last id, try 'gen'"
   id=`cat $priv/latest.id`
   info "Taking latest ID $id from $priv/latest.id as the git commit message"
   message=$id
   c1ghcommit $message
}

c1ghuser() {
  carg $# ghuser user
  user="$1"
  headline "Validate exists: https://github.com/$user"
  curl -s -I https://github.com/$user | grep '^HTTP' | grep OK || abort "Invalid Github user: $user"
  echo "$1" > $priv/github.user
  headline "Github user saved in $priv/github.user"
  cat $priv/github.user
}

c0ghshow() {
   carg $# ghshow
   if [ ! -d $priv ]
   then
      headlinew "Not found: $priv"
   else
      if [ -f $priv/github.user ]
      then
         headline $priv/github.user
         cat $priv/github.user
      else
         warn "No $priv/github.user"
      fi
      if [ -f $priv/cert.pem ]
      then
         headline $priv/cert.pem
         openssl x509 -text -in $priv/cert.pem | grep 'CN='
      fi
   fi
   if [ ! -d $repo ]
   then
      abort "Not found: $repo" "$concerto ghinit $last #or $concerto ghclone"
   fi
   cd $repo
   headline "$repo \$ ls"
   ls -lta | grep -v '\.$'
   headline "$repo \$ sha1sum"
   sha1sum `ls -t *.cson *.pem`
   if [ ! -f $client_authorized_certs.cson ]
   then
     headlinew "$repo \$ cat $client_authorized_certs.cson"
   else
     headline "$repo \$ cat $client_authorized_certs.cson"
     cat $client_authorized_certs.cson
     for cert in `cat $client_authorized_certs.cson | grep "^\s*'" | sed "s/^\s*'\([^\']*\)'/\1/"`
     do
        if ! echo "$cert" | grep -q '\.cert.pem$'
        then
           headlinew "$repo $ head $cert"
           head -2 $cert
        else
          headline "$repo $ openssl x509 $cert"
          openssl x509 -text -in $cert | grep 'CN='
        fi
     done
   fi
   headline "$repo \$ git remote -v"
   git remote -v
   headline "$repo \$ git status"
   git status | sed '/^$/d'
}

c0ghclean() {
   carg $# ghclean
   cd $repo || abort "Not found: $repo"
   headline "$repo \$ $ ls"
   ls -lta | grep -v '\.$'
   headline "$repo \$ sha1sum"
   sha1sum `ls -t *.cson *.pem`
   headline "$repo \$ cat $client_authorized_certs.cson"
   cat $client_authorized_certs.cson
   headline 'Check certs in repo vs manifest'
   for cert in `ls *.cert.pem`
   do
      if ! cat $client_authorized_certs.cson | grep -q "$cert"
      then
         echo "Try: rm -i $repo/$cert"
      fi
   done
}

c0id() {
  carg $# id
  cat $priv/latest.id
}

c0show() {
   carg $# show
   cd $priv/tmp
   headline "$priv/tmp $ ls -lt *.pem"
   ls -lt *.pem | head -3
   headline "$priv/tmp $ sha1sum *.pem"
   sha1sum `ls -t *.pem` | head -3
   cd $priv
   headline "$priv/tmp $ ls -lt *.pem"
   ls -lt *.pem
   headline "$priv/tmp $ sha1sum *.pem"
   sha1sum `ls -t *.pem` | head -3
   if [ -f cert.pem ]
   then
      headline `pwd`/cert.pem
      sha1sum cert.pem | cut -d' ' -f1
      openssl x509 -text -in cert.pem | grep 'CN='
   fi
}

c0help() {
   ec=''
   er=''
   eu=''
   if [ -t 1 ]
   then
      eu=${sBold}${cLightBlue}
      ec=${cLightBlue}
      er=${cNormal}${sReset}
   fi
   headline "Usage: see $help"
   echo -e "  show ${ec}# show state of $priv ${er}"
   echo -e "  gen ${ec}# generate a timestamped cert in $priv/tmp ${er}"
   echo -e "  id ${ec}# show $priv/latest.id for last generated cert ${er}"
   echo -e "  deploy ID ${ec}# copy generated cert files to $priv ${er}"
   echo -e "  archive ${ec}# move contents of $priv to $priv/tmp/archive ${er}"
   echo -e "  ghshow ${ec}# show state of $repo ${er}"
   echo -e "  ghinit USER ID ${ec}# initialise $repo with generated cert ${er}"
   echo -e "  ghclone USER ${ec}# git clone $repo ${er}"
   echo -e "  ghpull ${ec}# git pull $repo ${er}"
   echo -e "  ghcommit MESSAGE ${ec}# git add, commit, push $repo ${er}"
   echo -e "  ghadd ID ${ec}# copy generated cert to $repo ${er}"
   echo -e "  ghuser USER ${ec}# save Github.com user in $priv/github.user ${er}"
}

c0danger1() {
   $concerto archive
   $concerto gen
   $concerto deploy
   $concerto ghadd
}

# cli command

command=help
if [ $# -ge 1 ]
then
   command="$1"
   echo $command | grep -q '^\w\w*$' || abort "Invalid command: $command"
   shift
fi
[ -t 1 ] && echo -e "${cLightGray}${sBold}command: $command ${@}${sReset}"
c$#$command $@ || c0help

#echo
